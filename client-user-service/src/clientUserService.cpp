//============================================================================
// Name        : clientUserService.cpp
// Author      : Kiran Mohan E
// Version     :
// Copyright   : Copyright (c) 2016 Kiran Mohan E,  All Rights Reserved.
// Description : User Service using ONC RPC. This file defines the
//               user service remote protocol.
//============================================================================

#include <iostream>
#include "userService.h" /* user-service.h generated by rpcgen
                            from lib-user-service/user-service.x*/
using namespace std;

class ClientUserService {

    CLIENT * clnt;
    const char * const server;

public:

    /**
     * Constructs initializes client handle to
     * remote user service
     */
    ClientUserService(const char * const remoteServer) :
            server(remoteServer) {
        /*
         * Create client "handle" used for
         * calling USER_SERVICE on the server
         * designated on the command line.
         */

        clnt = clnt_create(server, USER_SERVICE, USER_SERVICE_VERS, "tcp");

        if (clnt == NULL) {
            /*
             * Couldn't establish connection
             * with server.
             * Print error message and die.
             */

            clnt_pcreateerror(server);
            exit(1);
        }
    }

    /**
     * Destructor closes the connection to the remote service
     */
    ~ClientUserService() {
        clnt_destroy(clnt);
    }

    void run() {
        bool runLoop = true;
        while (runLoop) {
            int option = 0;
            cout << "\nSelect an option: " << endl;
            cout << "1. Login" << endl;
            cout << "2. Register" << endl;
            cout << "3. Exit" << endl;
            cin >> option;

            switch (option) {
            case 1:
                break;
            case 2:
                signUp();
                break;
            case 3:
                runLoop = false;
                break;
            default:
                cerr << "Invalid option : " << option
                        << ". Please enter a valid option." << endl;
                ;
            }

        }
    }

    /**
     * Send sign up request to server
     */
    bool signUp() {

        // get details from user
        string username;
        string password;
        cout << "\n*** User Registration ***" << endl;
        cout << "Enter username : ";
        cin >> username;
        cout << "Enter password (no password masking) : ";
        cin >> password;

        // create user profile
        user_profile userProfile;
        userProfile.username = const_cast<char *>(username.c_str());
        userProfile.password = const_cast<char *>(password.c_str());
        /*
         * Call the remote procedure
         * "sign_up" on the server
         */
        result * res = sign_up_1(&userProfile, clnt);
        if (res == NULL) {
            /*
             * An error occurred while calling
             * the server.
             * Print error message and die.
             */

            clnt_perror(clnt, server);
            exit(1);
        }

        /* Okay, we successfully called
         * the remote procedure.
         */

        if (res->status != 0) {
            cerr << "ERROR: Could not sign up " << username << endl;
            return false;
        } else {
            cout << "--------------------\n"
                 << res->resultData
                 << "--------------------\n" << endl;
            return true;
        }
    }
};

int main(int argc, char **argv) {

    if (argc != 2) {
        cerr << "usage: " << argv[0] << " host" << endl;
        ;
        exit(1);
    }

    char *server = argv[1];
    ClientUserService userServiceClient(server);
    userServiceClient.run();

    return 0;
}
